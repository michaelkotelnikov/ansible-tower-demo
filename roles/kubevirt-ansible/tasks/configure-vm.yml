---
- name: Get a list of all service objects
  kubernetes.core.k8s_info:
    api_version: "kubevirt.io/v1"
    kind: VirtualMachine
    namespace: kubevirt-ansible
    api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
    host: "{{ ocp_url }}"
    validate_certs: false
  register: vm_list

- debug:
    msg: "{{ vm_list.resources | json_query('[*].metadata.name') }}"
  register: vm_names

- name: "Create VM if does not exist"
  block:
  - name: "Create VM - {{ kubevirt_vm_definition.name }}"
    kubevirt.core.kubevirt_vm:
      state: present
      name: "{{ kubevirt_vm_definition.name }}"
      namespace: "{{ kubevirt_vm_definition.namespace }}"
      validate_certs: false
      host: "{{ ocp_url }}"
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      instancetype:
        name: u1.medium
      preference:
        name: fedora
      spec:
        domain:
          devices:
            interfaces:
            - name: default
              masquerade: {}
          machine:
            type: type: pc-q35-rhel9.3.0
        networks:
        - name: default
          pod: {}
        volumes:
        - containerDisk:
            image: quay.io/containerdisks/fedora:latest
          name: containerdisk
        - cloudInitConfigDrive:
            userData: |-
              #cloud-config
                user: "{{ kubevirt_vm_definition.user }}"
                password: "{{ kubevirt_vm_definition.password }}"
                chpasswd: { expire: False }
                ssh_pwauth: True
          name: cloudinit
      wait: yes

  - name: "Expose ssh port for VM - {{ kubevirt_vm_definition.name }}"
    kubernetes.core.k8s_service:
      validate_certs: false
      host: "{{ ocp_url }}"
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      state: present
      name: "{{ kubevirt_vm_definition.name }}-ssh"
      namespace: "{{ kubevirt_vm_definition.namespace }}"
      ports:
      - port: 22
        protocol: TCP
      selector:
        vm.kubevirt.io/name: "{{ kubevirt_vm_definition.name }}"

  - name: "Wait for VM - {{ kubevirt_vm_definition.name }} to configure"
    pause:
      seconds: 60
  when: kubevirt_vm_definition.name not in vm_names.msg

- name: "Add the VM - {{ kubevirt_vm_definition.name }} to the inventory"
  add_host:
    hostname: "{{ kubevirt_vm_definition.name }}"
    ansible_host: "{{ kubevirt_vm_definition.name }}-ssh.{{ kubevirt_vm_definition.namespace }}.svc.cluster.local"
    ansible_user: "{{ kubevirt_vm_definition.user }}"
    ansible_password: "{{ kubevirt_vm_definition.password }}"
    groups: "{{ kubevirt_vm_definition.groups }}"

- name: "Add the VM - {{ kubevirt_vm_definition.name }} to AAP inventory"
  awx.awx.host:
    controller_host: "{{ controller_host }}"
    controller_oauthtoken: "{{ aap_token }}"
    validate_certs: false
    name: "{{ kubevirt_vm_definition.name }}"
    inventory: "{{ aap_inventory }}"
    state: present
    variables:
      ansible_host: "{{ kubevirt_vm_definition.name }}-ssh.{{ kubevirt_vm_definition.namespace }}.svc.cluster.local"
      ansible_user: "{{ kubevirt_vm_definition.user }}"
      ansible_password: "{{ kubevirt_vm_definition.password }}"

- name: "Add the VM - {{ kubevirt_vm_definition.name }} to AAP group"
  awx.awx.group:
    controller_host: "{{ controller_host }}"
    controller_oauthtoken: "{{ aap_token }}"
    validate_certs: false
    name: "{{ item }}"
    inventory: "{{ aap_inventory }}"
    state: present
    hosts:
      - "{{ kubevirt_vm_definition.name }}"
    preserve_existing_hosts: True
  loop: "{{ kubevirt_vm_definition.groups }}"
